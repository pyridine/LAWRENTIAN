// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FileSystem.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FileSystem_h__
#define __FileSystem_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace FileSystem
{

class File;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FileSystem::File>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FileSystem::File*);

}

}

namespace FileSystem
{

class File;
bool operator==(const File&, const File&);
bool operator<(const File&, const File&);
::Ice::Object* upCast(::FileSystem::File*);
typedef ::IceInternal::Handle< ::FileSystem::File> FilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FileSystem::File> FilePrx;
void __patch(FilePtr&, const ::Ice::ObjectPtr&);

}

namespace FileSystem
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

struct TimeIce
{
    ::std::string dayOfTheWeek;
    ::Ice::Int year;
    ::Ice::Int month;
    ::Ice::Int day;
    ::Ice::Int hour;
    ::Ice::Int minute;
    ::Ice::Int second;
    ::Ice::Int milliseconds;

    bool operator==(const TimeIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(dayOfTheWeek != __rhs.dayOfTheWeek)
        {
            return false;
        }
        if(year != __rhs.year)
        {
            return false;
        }
        if(month != __rhs.month)
        {
            return false;
        }
        if(day != __rhs.day)
        {
            return false;
        }
        if(hour != __rhs.hour)
        {
            return false;
        }
        if(minute != __rhs.minute)
        {
            return false;
        }
        if(second != __rhs.second)
        {
            return false;
        }
        if(milliseconds != __rhs.milliseconds)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TimeIce& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(dayOfTheWeek < __rhs.dayOfTheWeek)
        {
            return true;
        }
        else if(__rhs.dayOfTheWeek < dayOfTheWeek)
        {
            return false;
        }
        if(year < __rhs.year)
        {
            return true;
        }
        else if(__rhs.year < year)
        {
            return false;
        }
        if(month < __rhs.month)
        {
            return true;
        }
        else if(__rhs.month < month)
        {
            return false;
        }
        if(day < __rhs.day)
        {
            return true;
        }
        else if(__rhs.day < day)
        {
            return false;
        }
        if(hour < __rhs.hour)
        {
            return true;
        }
        else if(__rhs.hour < hour)
        {
            return false;
        }
        if(minute < __rhs.minute)
        {
            return true;
        }
        else if(__rhs.minute < minute)
        {
            return false;
        }
        if(second < __rhs.second)
        {
            return true;
        }
        else if(__rhs.second < second)
        {
            return false;
        }
        if(milliseconds < __rhs.milliseconds)
        {
            return true;
        }
        else if(__rhs.milliseconds < milliseconds)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TimeIce& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TimeIce& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TimeIce& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TimeIce& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Version
{
    ::Ice::Int verNum;
    ::std::string verName;
    ::FileSystem::TimeIce time;

    bool operator==(const Version& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(verNum != __rhs.verNum)
        {
            return false;
        }
        if(verName != __rhs.verName)
        {
            return false;
        }
        if(time != __rhs.time)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Version& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(verNum < __rhs.verNum)
        {
            return true;
        }
        else if(__rhs.verNum < verNum)
        {
            return false;
        }
        if(verName < __rhs.verName)
        {
            return true;
        }
        else if(__rhs.verName < verName)
        {
            return false;
        }
        if(time < __rhs.time)
        {
            return true;
        }
        else if(__rhs.time < time)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Version& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Version& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Version& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Version& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::FileSystem::Version> VerSeq;

typedef ::std::vector< ::std::string> StrSeq;

}

namespace fs
{

const ::std::string COPY = "Copy";

const ::std::string IMAGE = "Image";

const ::std::string extCOPY = ".docx";

const ::std::string extIMAGE = ".jpg";

const ::std::string XML = "_XML_";

const ::std::string extXML = ".xml";

}

namespace Ice
{
template<>
struct StreamableTraits< ::FileSystem::TimeIce>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 29;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FileSystem::TimeIce, S>
{
    static void write(S* __os, const ::FileSystem::TimeIce& v)
    {
        __os->write(v.dayOfTheWeek);
        __os->write(v.year);
        __os->write(v.month);
        __os->write(v.day);
        __os->write(v.hour);
        __os->write(v.minute);
        __os->write(v.second);
        __os->write(v.milliseconds);
    }
};

template<class S>
struct StreamReader< ::FileSystem::TimeIce, S>
{
    static void read(S* __is, ::FileSystem::TimeIce& v)
    {
        __is->read(v.dayOfTheWeek);
        __is->read(v.year);
        __is->read(v.month);
        __is->read(v.day);
        __is->read(v.hour);
        __is->read(v.minute);
        __is->read(v.second);
        __is->read(v.milliseconds);
    }
};

template<>
struct StreamableTraits< ::FileSystem::Version>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 34;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FileSystem::Version, S>
{
    static void write(S* __os, const ::FileSystem::Version& v)
    {
        __os->write(v.verNum);
        __os->write(v.verName);
        __os->write(v.time);
    }
};

template<class S>
struct StreamReader< ::FileSystem::Version, S>
{
    static void read(S* __is, ::FileSystem::Version& v)
    {
        __is->read(v.verNum);
        __is->read(v.verName);
        __is->read(v.time);
    }
};

}

namespace FileSystem
{

class Callback_File_receiveLatest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_receiveLatest_Base> Callback_File_receiveLatestPtr;

class Callback_File_receiveVersion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_receiveVersion_Base> Callback_File_receiveVersionPtr;

class Callback_File_receiveLatestXML_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_receiveLatestXML_Base> Callback_File_receiveLatestXMLPtr;

class Callback_File_receiveVersionXML_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_receiveVersionXML_Base> Callback_File_receiveVersionXMLPtr;

class Callback_File_getArtWriter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_getArtWriter_Base> Callback_File_getArtWriterPtr;

class Callback_File_sendFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_sendFile_Base> Callback_File_sendFilePtr;

class Callback_File_getHistory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_getHistory_Base> Callback_File_getHistoryPtr;

class Callback_File_getImageList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_getImageList_Base> Callback_File_getImageListPtr;

class Callback_File_renameArt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_renameArt_Base> Callback_File_renameArtPtr;

class Callback_File_changeArtSection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_changeArtSection_Base> Callback_File_changeArtSectionPtr;

class Callback_File_changeArtIssueDate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_changeArtIssueDate_Base> Callback_File_changeArtIssueDatePtr;

class Callback_File_archiveIssue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_archiveIssue_Base> Callback_File_archiveIssuePtr;

class Callback_File_deleteArt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_deleteArt_Base> Callback_File_deleteArtPtr;

class Callback_File_deleteAllImages_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_deleteAllImages_Base> Callback_File_deleteAllImagesPtr;

class Callback_File_deleteImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_deleteImage_Base> Callback_File_deleteImagePtr;

class Callback_File_deleteAllCopies_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_deleteAllCopies_Base> Callback_File_deleteAllCopiesPtr;

class Callback_File_deleteCopyVer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_File_deleteCopyVer_Base> Callback_File_deleteCopyVerPtr;

}

namespace IceProxy
{

namespace FileSystem
{

class File : virtual public ::IceProxy::Ice::Object
{
public:

    ::FileSystem::ByteSeq receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return receiveLatest(issueDate, sec, art, type, fName, 0);
    }
    ::FileSystem::ByteSeq receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return receiveLatest(issueDate, sec, art, type, fName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveLatest(issueDate, sec, art, type, fName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveLatest(issueDate, sec, art, type, fName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_receiveLatest(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::ByteSeq&)> _response;
        };
        return begin_receiveLatest(issueDate, sec, art, type, fName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::FileSystem::Callback_File_receiveLatestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_receiveLatestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatest(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::FileSystem::ByteSeq end_receiveLatest(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::ByteSeq receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FileSystem::ByteSeq receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver)
    {
        return receiveVersion(issueDate, sec, art, type, fName, ver, 0);
    }
    ::FileSystem::ByteSeq receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveVersion(issueDate, sec, art, type, fName, ver, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_receiveVersion(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::ByteSeq&)> _response;
        };
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::FileSystem::Callback_File_receiveVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_receiveVersionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersion(issueDate, sec, art, type, fName, ver, &__ctx, __del, __cookie);
    }

    ::FileSystem::ByteSeq end_receiveVersion(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::ByteSeq receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FileSystem::ByteSeq receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return receiveLatestXML(issueDate, sec, art, type, fName, 0);
    }
    ::FileSystem::ByteSeq receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return receiveLatestXML(issueDate, sec, art, type, fName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveLatestXML(issueDate, sec, art, type, fName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveLatestXML(issueDate, sec, art, type, fName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_receiveLatestXML(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::ByteSeq&)> _response;
        };
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::FileSystem::Callback_File_receiveLatestXMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_receiveLatestXMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveLatestXML(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::FileSystem::ByteSeq end_receiveLatestXML(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::ByteSeq receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FileSystem::ByteSeq receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver)
    {
        return receiveVersionXML(issueDate, sec, art, type, fName, ver, 0);
    }
    ::FileSystem::ByteSeq receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::ByteSeq __ret;
                try
                {
                    __ret = __proxy->end_receiveVersionXML(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::ByteSeq&)> _response;
        };
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::FileSystem::Callback_File_receiveVersionXMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_receiveVersionXMLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveVersionXML(issueDate, sec, art, type, fName, ver, &__ctx, __del, __cookie);
    }

    ::FileSystem::ByteSeq end_receiveVersionXML(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::ByteSeq receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver)
    {
        return getArtWriter(issueDate, sec, art, ver, 0);
    }
    ::std::string getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return getArtWriter(issueDate, sec, art, ver, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArtWriter(issueDate, sec, art, ver, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArtWriter(issueDate, sec, art, ver, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArtWriter(issueDate, sec, art, ver, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArtWriter(issueDate, sec, art, ver, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getArtWriter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getArtWriter(issueDate, sec, art, ver, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::FileSystem::Callback_File_getArtWriterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_getArtWriterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArtWriter(issueDate, sec, art, ver, &__ctx, __del, __cookie);
    }

    ::std::string end_getArtWriter(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq)
    {
        return sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0);
    }
    bool sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        return sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_sendFile(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::FileSystem::Callback_File_sendFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& writerName, const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fNameExt, const ::FileSystem::ByteSeq& seq, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_sendFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(writerName, issueDate, sec, art, type, fNameExt, seq, &__ctx, __del, __cookie);
    }

    bool end_sendFile(const ::Ice::AsyncResultPtr&);
    
private:

    bool sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FileSystem::VerSeq getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return getHistory(issueDate, sec, art, type, fName, 0);
    }
    ::FileSystem::VerSeq getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return getHistory(issueDate, sec, art, type, fName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::FileSystem::VerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHistory(issueDate, sec, art, type, fName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHistory(issueDate, sec, art, type, fName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::VerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHistory(issueDate, sec, art, type, fName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHistory(issueDate, sec, art, type, fName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::VerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::VerSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::VerSeq __ret;
                try
                {
                    __ret = __proxy->end_getHistory(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::VerSeq&)> _response;
        };
        return begin_getHistory(issueDate, sec, art, type, fName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::FileSystem::Callback_File_getHistoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& type, const ::std::string& fName, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_getHistoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHistory(issueDate, sec, art, type, fName, &__ctx, __del, __cookie);
    }

    ::FileSystem::VerSeq end_getHistory(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::VerSeq getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::FileSystem::StrSeq getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return getImageList(issueDate, sec, art, 0);
    }
    ::FileSystem::StrSeq getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return getImageList(issueDate, sec, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::FileSystem::StrSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageList(issueDate, sec, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageList(issueDate, sec, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::FileSystem::StrSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getImageList(issueDate, sec, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getImageList(issueDate, sec, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::FileSystem::StrSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::FileSystem::StrSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                ::FileSystem::StrSeq __ret;
                try
                {
                    __ret = __proxy->end_getImageList(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::FileSystem::StrSeq&)> _response;
        };
        return begin_getImageList(issueDate, sec, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return begin_getImageList(issueDate, sec, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_getImageList(issueDate, sec, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageList(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageList(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::FileSystem::Callback_File_getImageListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageList(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_getImageListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getImageList(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::FileSystem::StrSeq end_getImageList(const ::Ice::AsyncResultPtr&);
    
private:

    ::FileSystem::StrSeq getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew)
    {
        return renameArt(issueDate, sec, artOld, artNew, 0);
    }
    bool renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx)
    {
        return renameArt(issueDate, sec, artOld, artNew, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_renameArt(issueDate, sec, artOld, artNew, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_renameArt(issueDate, sec, artOld, artNew, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_renameArt(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_renameArt(issueDate, sec, artOld, artNew, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::FileSystem::Callback_File_renameArtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& artOld, const ::std::string& artNew, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_renameArtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_renameArt(issueDate, sec, artOld, artNew, &__ctx, __del, __cookie);
    }

    bool end_renameArt(const ::Ice::AsyncResultPtr&);
    
private:

    bool renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art)
    {
        return changeArtSection(issueDate, secOld, secNew, art, 0);
    }
    bool changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return changeArtSection(issueDate, secOld, secNew, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeArtSection(issueDate, secOld, secNew, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeArtSection(issueDate, secOld, secNew, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_changeArtSection(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_changeArtSection(issueDate, secOld, secNew, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::FileSystem::Callback_File_changeArtSectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string& issueDate, const ::std::string& secOld, const ::std::string& secNew, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_changeArtSectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtSection(issueDate, secOld, secNew, art, &__ctx, __del, __cookie);
    }

    bool end_changeArtSection(const ::Ice::AsyncResultPtr&);
    
private:

    bool changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art)
    {
        return changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0);
    }
    bool changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_changeArtIssueDate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::FileSystem::Callback_File_changeArtIssueDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string& oldIssueDate, const ::std::string& newIssueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_changeArtIssueDatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeArtIssueDate(oldIssueDate, newIssueDate, sec, art, &__ctx, __del, __cookie);
    }

    bool end_changeArtIssueDate(const ::Ice::AsyncResultPtr&);
    
private:

    bool changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool archiveIssue(const ::std::string& issueDate)
    {
        return archiveIssue(issueDate, 0);
    }
    bool archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx)
    {
        return archiveIssue(issueDate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_archiveIssue(const ::std::string& issueDate, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_archiveIssue(issueDate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_archiveIssue(const ::std::string& issueDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_archiveIssue(issueDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_archiveIssue(issueDate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_archiveIssue(issueDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_archiveIssue(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_archiveIssue(issueDate, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate)
    {
        return begin_archiveIssue(issueDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx)
    {
        return begin_archiveIssue(issueDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_archiveIssue(issueDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_archiveIssue(issueDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate, const ::FileSystem::Callback_File_archiveIssuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_archiveIssue(issueDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string& issueDate, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_archiveIssuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_archiveIssue(issueDate, &__ctx, __del, __cookie);
    }

    bool end_archiveIssue(const ::Ice::AsyncResultPtr&);
    
private:

    bool archiveIssue(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_archiveIssue(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return deleteArt(issueDate, sec, art, 0);
    }
    bool deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return deleteArt(issueDate, sec, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteArt(issueDate, sec, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteArt(issueDate, sec, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteArt(issueDate, sec, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteArt(issueDate, sec, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deleteArt(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deleteArt(issueDate, sec, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return begin_deleteArt(issueDate, sec, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_deleteArt(issueDate, sec, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteArt(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteArt(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::FileSystem::Callback_File_deleteArtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteArt(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_deleteArtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteArt(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    bool end_deleteArt(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return deleteAllImages(issueDate, sec, art, 0);
    }
    bool deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return deleteAllImages(issueDate, sec, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteAllImages(issueDate, sec, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteAllImages(issueDate, sec, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteAllImages(issueDate, sec, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteAllImages(issueDate, sec, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deleteAllImages(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deleteAllImages(issueDate, sec, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return begin_deleteAllImages(issueDate, sec, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_deleteAllImages(issueDate, sec, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllImages(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllImages(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::FileSystem::Callback_File_deleteAllImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllImages(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_deleteAllImagesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllImages(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    bool end_deleteAllImages(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name)
    {
        return deleteImage(issueDate, sec, art, name, 0);
    }
    bool deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return deleteImage(issueDate, sec, art, name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImage(issueDate, sec, art, name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImage(issueDate, sec, art, name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteImage(issueDate, sec, art, name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteImage(issueDate, sec, art, name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deleteImage(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deleteImage(issueDate, sec, art, name, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name)
    {
        return begin_deleteImage(issueDate, sec, art, name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_deleteImage(issueDate, sec, art, name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(issueDate, sec, art, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(issueDate, sec, art, name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::FileSystem::Callback_File_deleteImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(issueDate, sec, art, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::std::string& name, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_deleteImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteImage(issueDate, sec, art, name, &__ctx, __del, __cookie);
    }

    bool end_deleteImage(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return deleteAllCopies(issueDate, sec, art, 0);
    }
    bool deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return deleteAllCopies(issueDate, sec, art, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteAllCopies(issueDate, sec, art, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteAllCopies(issueDate, sec, art, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteAllCopies(issueDate, sec, art, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteAllCopies(issueDate, sec, art, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deleteAllCopies(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deleteAllCopies(issueDate, sec, art, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art)
    {
        return begin_deleteAllCopies(issueDate, sec, art, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx)
    {
        return begin_deleteAllCopies(issueDate, sec, art, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllCopies(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllCopies(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::FileSystem::Callback_File_deleteAllCopiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllCopies(issueDate, sec, art, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_deleteAllCopiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteAllCopies(issueDate, sec, art, &__ctx, __del, __cookie);
    }

    bool end_deleteAllCopies(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver)
    {
        return deleteCopyVer(issueDate, sec, art, ver, 0);
    }
    bool deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return deleteCopyVer(issueDate, sec, art, ver, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteCopyVer(issueDate, sec, art, ver, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deleteCopyVer(issueDate, sec, art, ver, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_deleteCopyVer(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_deleteCopyVer(issueDate, sec, art, ver, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::FileSystem::Callback_File_deleteCopyVerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string& issueDate, const ::std::string& sec, const ::std::string& art, ::Ice::Int ver, const ::Ice::Context& __ctx, const ::FileSystem::Callback_File_deleteCopyVerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deleteCopyVer(issueDate, sec, art, ver, &__ctx, __del, __cookie);
    }

    bool end_deleteCopyVer(const ::Ice::AsyncResultPtr&);
    
private:

    bool deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<File> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_secure(bool __secure) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_twoway() const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_oneway() const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_batchOneway() const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_datagram() const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_batchDatagram() const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_compress(bool __compress) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_timeout(int __timeout) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<File> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<File*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace FileSystem
{

class File : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::FileSystem::ByteSeq receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::FileSystem::ByteSeq receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::FileSystem::ByteSeq receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::FileSystem::ByteSeq receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::FileSystem::VerSeq getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::FileSystem::StrSeq getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool archiveIssue(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace FileSystem
{

class File : virtual public ::IceDelegate::FileSystem::File,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::FileSystem::ByteSeq receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::VerSeq getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::StrSeq getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool archiveIssue(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace FileSystem
{

class File : virtual public ::IceDelegate::FileSystem::File,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::FileSystem::ByteSeq receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::ByteSeq receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::VerSeq getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::FileSystem::StrSeq getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool archiveIssue(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace FileSystem
{

class File : virtual public ::Ice::Object
{
public:

    typedef FilePrx ProxyType;
    typedef FilePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::FileSystem::ByteSeq receiveLatest(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveLatest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FileSystem::ByteSeq receiveVersion(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveVersion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FileSystem::ByteSeq receiveLatestXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveLatestXML(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FileSystem::ByteSeq receiveVersionXML(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveVersionXML(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getArtWriter(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getArtWriter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool sendFile(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::FileSystem::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FileSystem::VerSeq getHistory(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getHistory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::FileSystem::StrSeq getImageList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getImageList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool renameArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___renameArt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool changeArtSection(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeArtSection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool changeArtIssueDate(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeArtIssueDate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool archiveIssue(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___archiveIssue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deleteArt(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteArt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deleteAllImages(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteAllImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deleteImage(const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deleteAllCopies(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteAllCopies(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool deleteCopyVer(const ::std::string&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deleteCopyVer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const File& l, const File& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const File& l, const File& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace FileSystem
{

template<class T>
class CallbackNC_File_receiveLatest : public Callback_File_receiveLatest_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&);

    CallbackNC_File_receiveLatest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveLatest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_receiveLatestPtr
newCallback_File_receiveLatest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveLatest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_receiveLatestPtr
newCallback_File_receiveLatest(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveLatest<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_receiveLatest : public Callback_File_receiveLatest_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&, const CT&);

    Callback_File_receiveLatest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveLatest(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_receiveLatestPtr
newCallback_File_receiveLatest(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveLatest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_receiveLatestPtr
newCallback_File_receiveLatest(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveLatest<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_receiveVersion : public Callback_File_receiveVersion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&);

    CallbackNC_File_receiveVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_receiveVersionPtr
newCallback_File_receiveVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveVersion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_receiveVersionPtr
newCallback_File_receiveVersion(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveVersion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_receiveVersion : public Callback_File_receiveVersion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&, const CT&);

    Callback_File_receiveVersion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveVersion(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_receiveVersionPtr
newCallback_File_receiveVersion(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_receiveVersionPtr
newCallback_File_receiveVersion(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveVersion<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_receiveLatestXML : public Callback_File_receiveLatestXML_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&);

    CallbackNC_File_receiveLatestXML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveLatestXML(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_receiveLatestXMLPtr
newCallback_File_receiveLatestXML(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveLatestXML<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_receiveLatestXMLPtr
newCallback_File_receiveLatestXML(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveLatestXML<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_receiveLatestXML : public Callback_File_receiveLatestXML_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&, const CT&);

    Callback_File_receiveLatestXML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveLatestXML(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_receiveLatestXMLPtr
newCallback_File_receiveLatestXML(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveLatestXML<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_receiveLatestXMLPtr
newCallback_File_receiveLatestXML(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveLatestXML<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_receiveVersionXML : public Callback_File_receiveVersionXML_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&);

    CallbackNC_File_receiveVersionXML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveVersionXML(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_receiveVersionXMLPtr
newCallback_File_receiveVersionXML(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveVersionXML<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_receiveVersionXMLPtr
newCallback_File_receiveVersionXML(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_receiveVersionXML<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_receiveVersionXML : public Callback_File_receiveVersionXML_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::ByteSeq&, const CT&);

    Callback_File_receiveVersionXML(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::ByteSeq __ret;
        try
        {
            __ret = __proxy->end_receiveVersionXML(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_receiveVersionXMLPtr
newCallback_File_receiveVersionXML(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveVersionXML<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_receiveVersionXMLPtr
newCallback_File_receiveVersionXML(T* instance, void (T::*cb)(const ::FileSystem::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_receiveVersionXML<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_getArtWriter : public Callback_File_getArtWriter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_File_getArtWriter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getArtWriter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_getArtWriterPtr
newCallback_File_getArtWriter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getArtWriter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_getArtWriterPtr
newCallback_File_getArtWriter(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getArtWriter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_getArtWriter : public Callback_File_getArtWriter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_File_getArtWriter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getArtWriter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_getArtWriterPtr
newCallback_File_getArtWriter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getArtWriter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_getArtWriterPtr
newCallback_File_getArtWriter(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getArtWriter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_sendFile : public Callback_File_sendFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_sendFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_sendFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_sendFilePtr
newCallback_File_sendFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_sendFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_sendFilePtr
newCallback_File_sendFile(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_sendFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_sendFile : public Callback_File_sendFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_sendFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_sendFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_sendFilePtr
newCallback_File_sendFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_sendFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_sendFilePtr
newCallback_File_sendFile(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_sendFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_getHistory : public Callback_File_getHistory_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::VerSeq&);

    CallbackNC_File_getHistory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::VerSeq __ret;
        try
        {
            __ret = __proxy->end_getHistory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_getHistoryPtr
newCallback_File_getHistory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::VerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getHistory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_getHistoryPtr
newCallback_File_getHistory(T* instance, void (T::*cb)(const ::FileSystem::VerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getHistory<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_getHistory : public Callback_File_getHistory_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::VerSeq&, const CT&);

    Callback_File_getHistory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::VerSeq __ret;
        try
        {
            __ret = __proxy->end_getHistory(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_getHistoryPtr
newCallback_File_getHistory(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::VerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getHistory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_getHistoryPtr
newCallback_File_getHistory(T* instance, void (T::*cb)(const ::FileSystem::VerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getHistory<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_getImageList : public Callback_File_getImageList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::FileSystem::StrSeq&);

    CallbackNC_File_getImageList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::StrSeq __ret;
        try
        {
            __ret = __proxy->end_getImageList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_getImageListPtr
newCallback_File_getImageList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getImageList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_getImageListPtr
newCallback_File_getImageList(T* instance, void (T::*cb)(const ::FileSystem::StrSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_getImageList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_getImageList : public Callback_File_getImageList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::FileSystem::StrSeq&, const CT&);

    Callback_File_getImageList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        ::FileSystem::StrSeq __ret;
        try
        {
            __ret = __proxy->end_getImageList(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_getImageListPtr
newCallback_File_getImageList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::FileSystem::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getImageList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_getImageListPtr
newCallback_File_getImageList(T* instance, void (T::*cb)(const ::FileSystem::StrSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_getImageList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_renameArt : public Callback_File_renameArt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_renameArt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_renameArt(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_renameArtPtr
newCallback_File_renameArt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_renameArt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_renameArtPtr
newCallback_File_renameArt(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_renameArt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_renameArt : public Callback_File_renameArt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_renameArt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_renameArt(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_renameArtPtr
newCallback_File_renameArt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_renameArt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_renameArtPtr
newCallback_File_renameArt(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_renameArt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_changeArtSection : public Callback_File_changeArtSection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_changeArtSection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_changeArtSection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_changeArtSectionPtr
newCallback_File_changeArtSection(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_changeArtSection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_changeArtSectionPtr
newCallback_File_changeArtSection(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_changeArtSection<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_changeArtSection : public Callback_File_changeArtSection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_changeArtSection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_changeArtSection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_changeArtSectionPtr
newCallback_File_changeArtSection(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_changeArtSection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_changeArtSectionPtr
newCallback_File_changeArtSection(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_changeArtSection<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_changeArtIssueDate : public Callback_File_changeArtIssueDate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_changeArtIssueDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_changeArtIssueDate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_changeArtIssueDatePtr
newCallback_File_changeArtIssueDate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_changeArtIssueDate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_changeArtIssueDatePtr
newCallback_File_changeArtIssueDate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_changeArtIssueDate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_changeArtIssueDate : public Callback_File_changeArtIssueDate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_changeArtIssueDate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_changeArtIssueDate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_changeArtIssueDatePtr
newCallback_File_changeArtIssueDate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_changeArtIssueDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_changeArtIssueDatePtr
newCallback_File_changeArtIssueDate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_changeArtIssueDate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_archiveIssue : public Callback_File_archiveIssue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_archiveIssue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_archiveIssue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_archiveIssuePtr
newCallback_File_archiveIssue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_archiveIssue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_archiveIssuePtr
newCallback_File_archiveIssue(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_archiveIssue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_archiveIssue : public Callback_File_archiveIssue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_archiveIssue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_archiveIssue(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_archiveIssuePtr
newCallback_File_archiveIssue(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_archiveIssue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_archiveIssuePtr
newCallback_File_archiveIssue(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_archiveIssue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_deleteArt : public Callback_File_deleteArt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_deleteArt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteArt(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_deleteArtPtr
newCallback_File_deleteArt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteArt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_deleteArtPtr
newCallback_File_deleteArt(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteArt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_deleteArt : public Callback_File_deleteArt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_deleteArt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteArt(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_deleteArtPtr
newCallback_File_deleteArt(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteArt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_deleteArtPtr
newCallback_File_deleteArt(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteArt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_deleteAllImages : public Callback_File_deleteAllImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_deleteAllImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteAllImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_deleteAllImagesPtr
newCallback_File_deleteAllImages(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteAllImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_deleteAllImagesPtr
newCallback_File_deleteAllImages(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteAllImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_deleteAllImages : public Callback_File_deleteAllImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_deleteAllImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteAllImages(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_deleteAllImagesPtr
newCallback_File_deleteAllImages(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteAllImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_deleteAllImagesPtr
newCallback_File_deleteAllImages(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteAllImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_deleteImage : public Callback_File_deleteImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_deleteImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_deleteImagePtr
newCallback_File_deleteImage(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_deleteImagePtr
newCallback_File_deleteImage(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_deleteImage : public Callback_File_deleteImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_deleteImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteImage(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_deleteImagePtr
newCallback_File_deleteImage(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_deleteImagePtr
newCallback_File_deleteImage(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_deleteAllCopies : public Callback_File_deleteAllCopies_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_deleteAllCopies(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteAllCopies(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_deleteAllCopiesPtr
newCallback_File_deleteAllCopies(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteAllCopies<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_deleteAllCopiesPtr
newCallback_File_deleteAllCopies(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteAllCopies<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_deleteAllCopies : public Callback_File_deleteAllCopies_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_deleteAllCopies(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteAllCopies(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_deleteAllCopiesPtr
newCallback_File_deleteAllCopies(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteAllCopies<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_deleteAllCopiesPtr
newCallback_File_deleteAllCopies(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteAllCopies<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_File_deleteCopyVer : public Callback_File_deleteCopyVer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_File_deleteCopyVer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteCopyVer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_File_deleteCopyVerPtr
newCallback_File_deleteCopyVer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteCopyVer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_File_deleteCopyVerPtr
newCallback_File_deleteCopyVer(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_File_deleteCopyVer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_File_deleteCopyVer : public Callback_File_deleteCopyVer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_File_deleteCopyVer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::FileSystem::FilePrx __proxy = ::FileSystem::FilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_deleteCopyVer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_File_deleteCopyVerPtr
newCallback_File_deleteCopyVer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteCopyVer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_File_deleteCopyVerPtr
newCallback_File_deleteCopyVer(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_File_deleteCopyVer<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
